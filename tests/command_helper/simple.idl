module simple {

  typedef long TestTypedef;
  typedef sequence<long> TestSeqTypedef;
  typedef sequence<TestTypedef> SeqOfTypedefedLong;
  typedef sequence<string> StringSeq; //because CORBA's isn't good enough???
  const long ArrayBounds = 4;
  typedef long TestArrayTypedef[ArrayBounds];
  typedef TestArrayTypedef TestArrayTypedef2;
  //typedef long TestArray2Typedef[ArrayBounds]; //FUTURE: duplicate arrays
  typedef string TestStringArray[ArrayBounds];

  typedef sequence<StringSeq> StringSeqSeq;
  typedef sequence<StringSeqSeq> StringSeqSeqSeq;
  typedef sequence<TestSeqTypedef> LongSeqSeq;
  typedef sequence<LongSeqSeq> LongSeqSeqSeq;

  //native SampleInfoSeq; //TODO: We'll have to deal with these at some point.

  struct TestStruct {
    long m1;
    unsigned long m2;
    TestSeqTypedef seq1;
    SeqOfTypedefedLong seq2;
    //DEPRECATED: sequence<octet> seq2;
  };

  typedef sequence<TestStruct> TestStructSequence;
  typedef TestStruct TestStructArray[ArrayBounds];

  struct TestNestedStruct {
    TestStruct m;
    string str;
    TestArrayTypedef arr;
    StringSeqSeq sss;
    StringSeqSeqSeq ssss;
    LongSeqSeq lss;
    LongSeqSeqSeq lsss;
  };

  const long TestConstLong = 0;
  //const long long TestConstLongLong = 4294967296;
  const unsigned long TIMESTAMP_INVALID_NSEC = 0xffffffff;
  const float TestConstFloat = 3.14;
  const double TestConstDouble = 2.17;
  const boolean TestConstBool = TRUE;
  const string TestConstString = "Hello World.";
  const TestTypedef TestConstTypedef = 42;

  enum TestEnum {a, b, c, d, e};

  typedef sequence<TestEnum> EnumSeq;
  typedef TestEnum EnumArray[ArrayBounds];

  struct TestStructWithEnum {
    long count;
    TestEnum which;
    EnumSeq lotsOfEm;
  };

  interface TestInterf {
    TestArrayTypedef op1(in TestEnum p1, inout unsigned short p2,
                         out TestSeqTypedef p3, out string p4);
  };

  interface TestInterf2 : TestInterf {
    long op2(in TestArrayTypedef p1, in LongSeqSeq p2);
  };

  interface TestInterf3 : TestInterf2 {
    void op3(in TestNestedStruct p1);
  };

#ifdef USE_LOCAL
  local
#endif
  interface TestLI {
    boolean localOp(inout EnumSeq p1, out TestStructSequence p2,
                    in TestStructArray p3);
    EnumSeq returnASequence(out short p1, inout TestStruct p2);
    void primitive(inout boolean p1, out char p2, inout octet p3, out short p4,
                   inout unsigned long p5, out long long p6, inout float p7,
                   out double p8);
    TestArrayTypedef primArray(in TestArrayTypedef p1,
                               inout TestArrayTypedef p2,
                               out TestArrayTypedef p3);
  };

#ifdef USE_LOCAL
  local
#endif
  interface Local2 {
    TestLI op(in TestLI p1, inout TestLI p2, out TestLI p3);
  };

  typedef sequence<Local2> Local2Seq;
  struct StructWithObjref {
    Local2 objref;
    Local2Seq objrefsequence;
  };

#ifdef USE_LOCAL
  local
#endif
  interface Local3 {
    StructWithObjref op(in StructWithObjref p1, inout StructWithObjref p2,
                        out StructWithObjref p3);
  };
  
};
