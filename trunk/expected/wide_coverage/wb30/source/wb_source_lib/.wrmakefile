# The file ".wrmakefile" is the template used by the Wind River Workbench to
# generate the makefiles of this project. Add user-specific build targets and
# make rules only(!) in this project's ".wrmakefile" file. These will then be
# automatically dumped into the makefiles.

WIND_HOME := $(subst \,/,$(WIND_HOME))
ACE_ROOT := $(subst \,/,$(ACE_ROOT))
TAO_ROOT := $(subst \,/,$(TAO_ROOT))
CIAO_ROOT := $(subst \,/,$(CIAO_ROOT))
HOST_ROOT := $(subst \,/,$(HOST_ROOT))
ACE_LIBOUT := ../lib

ACE_EXE_EXT = $(if $(filter Linux-gnu-native-3.x-4.x,$(BUILD_SPEC)),)$(if $(filter Windows-gnu-native-3.x-4.x,$(BUILD_SPEC)),.exe)
ACE_TARGET_PREFIX = $(if $(filter Linux-gnu-native-3.x-4.x,$(BUILD_SPEC)),lib)$(if $(filter Windows-gnu-native-3.x-4.x,$(BUILD_SPEC)),lib)
ACE_TARGET_NAME := source_lib
ACE_TARGET_EXT = $(if $(filter Linux-gnu-native-3.x-4.x,$(BUILD_SPEC)),.a)$(if $(filter Windows-gnu-native-3.x-4.x,$(BUILD_SPEC)),.a)
PROJECT_TARGET = $(filter %$(ACE_TARGET_EXT),$(PROJECT_TARGETS))
ACE_TARGET_DIR ?= $(ACE_TARGET_NAME)


all : generate_sources pre_build main_all post_build

_clean ::
	@echo "make: removing targets and objects of `pwd`"

%IDE_GENERATED%


-include $(PRJ_ROOT_DIR)/*.makefile

-include *.makefile

main_all : external_build $(PROJECT_TARGETS)
	@echo "make: built targets of `pwd`"


# entry point for extending the build
external_build ::
	@echo ""

# main entry point for pre processing prior to the build
pre_build :: $(PRE_BUILD_STEP)
	@echo "Create object list";\
	rm -f $(PRJ_ROOT_DIR)/filelist.txt;\
	for object in _dummy_ $(OBJECTS_source_lib); do\
		if [ "$$object" = "_dummy_" ]; then\
			continue ;\
		fi;\
		echo "$$object" >> $(PRJ_ROOT_DIR)/filelist.txt ;\
	done


# function for generating the correct Custom type Prerequisite (input or dep)
# using a ../ or ../../ prefix unless it's already an absolute path
CUST_PRE = $(if $(patsubst $%,,$(1:/%=)),../../)$(1)

# function for adding an exe_ext, if needed and the file exists
ADD_EXT = $(if $(ACE_EXE_EXT),$(if $(suffix $(1)),$(1),$(wildcard $(1) $(1)$(ACE_EXE_EXT))),$(1))

SPACE = $(should_be_unset) $(should_be_unset)
GENERATED_DIRTY = $(addprefix ../../, cre/o.le/more_names.cpp cre/o.le/more_names.h names.cpp names.h TheCheat.cpp TheCheat.h ./bar.txt ./moop.hxx ./qwee.cxx ./qwee_T.C ./weer.inl)

# entry point for generating sources prior to the build
generate_sources :: $(GENERATED_DIRTY)

LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../lib
PATH              := $(PATH):../lib

.NOTPARALLEL:
$(addprefix ../../,cre/o.le/more_names.cpp cre/o.le/more_names.h): $(foreach pre,more_names.key ../bin/generator,$(call ADD_EXT,$(call CUST_PRE,$(pre))))
	@cd ../.. ; test -d "cre/o.le" || mkdir -p "cre/o.le"
	$(TRACE_FLAG)cd ../.. ; ../bin/generator -o cre/o.le more_names.key
	$(TRACE_FLAG)cd ../.. ; echo cre/o.le/more_names.cpp and cre/o.le/more_names.h have been generated.
	@cd ../.. ; echo '#include "source_lib_pch.h"' > temp.$$$$ && cat cre/o.le/more_names.cpp >> temp.$$$$ && mv temp.$$$$ cre/o.le/more_names.cpp
.NOTPARALLEL:
$(addprefix ../../,names.cpp names.h): $(foreach pre,names.key something ../bin/generator,$(call ADD_EXT,$(call CUST_PRE,$(pre))))
	$(TRACE_FLAG)cd ../.. ; ../bin/generator -n names names.key
	$(TRACE_FLAG)cd ../.. ; echo names.cpp and names.h have been generated.
	@cd ../.. ; echo '#include "source_lib_pch.h"' > temp.$$$$ && cat names.cpp >> temp.$$$$ && mv temp.$$$$ names.cpp

.NOTPARALLEL:
$(addprefix ../../,TheCheat.cpp TheCheat.h): $(foreach pre,TheCheat.r ../bin/cppgen.pl,$(call ADD_EXT,$(call CUST_PRE,$(pre))))
	$(TRACE_FLAG)cd ../.. ; perl ../bin/cppgen.pl  TheCheat.r -o TheCheat.cpp TheCheat.h
	@cd ../.. ; echo '#include "source_lib_pch.h"' > temp.$$$$ && cat TheCheat.cpp >> temp.$$$$ && mv temp.$$$$ TheCheat.cpp

.NOTPARALLEL:
$(addprefix ../../,./bar.txt ./moop.hxx ./qwee.cxx ./qwee_T.C ./weer.inl): $(foreach pre,mondo/all.mondo ../mondo/mondo.pl ../mondo/modules/ReaderGen.pm,$(call ADD_EXT,$(call CUST_PRE,$(pre))))
	$(TRACE_FLAG)cd ../.. ; perl ../mondo/mondo.pl -fake mondo/all.mondo
	@cd ../.. ; echo '#include "source_lib_pch.h"' > temp.$$$$ && cat ./qwee.cxx >> temp.$$$$ && mv temp.$$$$ ./qwee.cxx

DIR_PREFIX = wb_source_lib/$(BUILD_SPEC)

# main entry point for post processing after the build
post_build :: $(POST_BUILD_STEP) deploy_output
	@echo ""

# entry point for deploying output after the build
deploy_output :: $(call CUST_PRE,$(ACE_LIBOUT)/$(ACE_TARGET_PREFIX)$(ACE_TARGET_NAME)$(ACE_TARGET_EXT))
$(call CUST_PRE,$(ACE_LIBOUT)/$(ACE_TARGET_PREFIX)$(ACE_TARGET_NAME)$(ACE_TARGET_EXT)): $(ACE_TARGET_DIR)/$(MODE_DIR)/$(ACE_TARGET_PREFIX)$(ACE_TARGET_NAME)$(ACE_TARGET_EXT)
	$(TRACE_FLAG)cd ../.. ; test -d $(ACE_LIBOUT) || mkdir -p $(ACE_LIBOUT); cp $(DIR_PREFIX)/$(ACE_TARGET_DIR)/$(MODE_DIR)/$(ACE_TARGET_PREFIX)$(ACE_TARGET_NAME)$(ACE_TARGET_EXT) $(ACE_LIBOUT)
	@echo ""


clean :: external_clean $(CLEAN_STEP) _clean

# entry point for extending the build clean
external_clean ::
	$(TRACE_FLAG)cd ../.. ; rm -f  cre/o.le/more_names.cpp cre/o.le/more_names.h
	$(TRACE_FLAG)cd ../.. ; rm -f  names.cpp names.h
	$(TRACE_FLAG)cd ../.. ; rm -f  TheCheat.cpp TheCheat.h
	$(TRACE_FLAG)cd ../.. ; rm -f  ./bar.txt ./moop.hxx ./qwee.cxx ./qwee_T.C ./weer.inl
	$(TRACE_FLAG)cd ../.. ; rm -f ../lib/$(ACE_TARGET_PREFIX)$(ACE_TARGET_NAME)$(ACE_TARGET_EXT)
	@echo ""



