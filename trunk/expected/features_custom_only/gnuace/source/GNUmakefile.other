# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.other
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.other
DEPENDENCY_FILE  = .depend.other

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libother.a
LIB              = $(LIB_UNCHECKED)
LIB_NAME         = libother

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = libother.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

FILES = \
  other/zar_otherA.cpp \
  other/zar_otherB.cpp

VPATH = .:other

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS =

PRJ_TYPE = library

INSLIB ?= .
ifeq ($(INSLIB),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/other
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  LIB   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L.
else
LDFLAGS      += -L.
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo other will not be built due to the following missing library:
	@echo $(LIBCHECK)

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

GENERATED_DIRTY += other/zar_otherA.cpp other/zar_otherA.h other/zar_otherA.inl other/zar_otherB.cpp other/zar_otherB.h other/zar_otherB.inl other/zar_otherC.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) other/other.poo -nt other/zar_otherA.cpp 2> /dev/null && $(TEST_EXE) other/other.poo -nt other/zar_otherA.h 2> /dev/null && $(TEST_EXE) other/other.poo -nt other/zar_otherA.inl 2> /dev/null && $(TEST_EXE) other/other.poo -nt other/zar_otherB.cpp 2> /dev/null && $(TEST_EXE) other/other.poo -nt other/zar_otherB.h 2> /dev/null && $(TEST_EXE) other/other.poo -nt other/zar_otherB.inl 2> /dev/null && $(TEST_EXE) other/other.poo -nt other/zar_otherC.h 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
other/zar_otherA.cpp other/zar_otherA.h other/zar_otherA.inl other/zar_otherB.cpp other/zar_otherB.h other/zar_otherB.inl other/zar_otherC.h: other/other.poo
	perl ../bin/exercise.pl $(CLO_ZARFLAGS) -GX -Sc other/other.poo

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:

