# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.simple
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.simple
DEPENDENCY_FILE  = .depend.simple

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libweird$$name.a
LIB              = $(LIB_UNCHECKED)
LIB_NAME         = libweird$$name

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = libweird$$name.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

FILES = \
  otherJC.cpp \
  otherJS.cpp \
  simpleJC.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lidl2jni_runtime

PRJ_TYPE = library

INSLIB ?= .
ifeq ($(INSLIB),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =

ifeq ($(versioned_so),1)
SOVERSION = .1.66530.5b
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/simple
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,idl2jni_runtime,$(findstring $(lib),$(foreach libpath,. $(IDL2JNI_ROOT)/lib /usr/lib $(INSLIB),$(wildcard $(libpath)/lib$(lib).* $(libpath)/$(lib).lib)))),idl2jni_runtime)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU

ACE_PCH_SOURCE = simple_pch.cpp
ACE_PCH_FILE   = simple_pch.h.gch

ifeq ($(pchsupport),1)
CPPFLAGS += -DUSING_PCH

$(addprefix $(VDIR), $(OBJS)): $(VDIR)$(ACE_PCH_FILE)
$(VSHOBJS): $(VSHDIR)$(ACE_PCH_FILE)
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L. -L$(IDL2JNI_ROOT)/lib
else
LDFLAGS      += -L. -L$(IDL2JNI_ROOT)/lib
endif
CPPFLAGS     += -Isomething

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo simple will not be built due to the following missing library:
	@echo $(LIBCHECK)

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

GENERATED_DIRTY += SomeSortOfTypedefHelper.class
OBJS_DEPEND_ON_GENERATED = 1
SomeSortOfTypedefHelper.class: SomeSortOfTypedefHelper.java
	"$(JAVA_HOME)/bin/javac" -sourcepath . -classpath $(IDL2JNI_ROOT)/lib/i2jrt.jar SomeSortOfTypedefHelper.java
	mkdir -p classes/. 2> /dev/null ; cp -f SomeSortOfTypedefHelper.class classes/. > /dev/null

GENERATED_DIRTY += SomeSortOfTypedefHelper.java SomeSortOfTypedefHelper.java otherJC.cpp otherJC.h otherJS.cpp otherJS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) other.idl -nt SomeSortOfTypedefHelper.java 2> /dev/null && $(TEST_EXE) other.idl -nt SomeSortOfTypedefHelper.java 2> /dev/null && $(TEST_EXE) other.idl -nt otherJC.cpp 2> /dev/null && $(TEST_EXE) other.idl -nt otherJC.h 2> /dev/null && $(TEST_EXE) other.idl -nt otherJS.cpp 2> /dev/null && $(TEST_EXE) other.idl -nt otherJS.h 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt SomeSortOfTypedefHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt SomeSortOfTypedefHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt otherJC.cpp 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt otherJC.h 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt otherJS.cpp 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt otherJS.h 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
SomeSortOfTypedefHelper.java SomeSortOfTypedefHelper.java otherJC.cpp otherJC.h otherJS.cpp otherJS.h: other.idl simpleJC.h $(IDL2JNI_ROOT)/bin/idl2jni
	$(IDL2JNI_ROOT)/bin/idl2jni -DUSE_LOCAL -DIDL2JNI_VERSION=1.0 other.idl
	echo Input: other

GENERATED_DIRTY += simple/ArrayBounds.java simple/EnumArrayHelper.java simple/EnumArrayHolder.java simple/EnumSeqHelper.java simple/EnumSeqHolder.java simple/Local2.java simple/Local2Helper.java simple/Local2Holder.java simple/Local2Operations.java simple/Local2SeqHelper.java simple/Local2SeqHolder.java simple/Local3.java simple/Local3Helper.java simple/Local3Holder.java simple/Local3Operations.java simple/LongSeqSeqHelper.java simple/LongSeqSeqHolder.java simple/LongSeqSeqSeqHelper.java simple/LongSeqSeqSeqHolder.java simple/SeqOfTypedefedLongHelper.java simple/SeqOfTypedefedLongHolder.java simple/StringSeqHelper.java simple/StringSeqHolder.java simple/StringSeqSeqHelper.java simple/StringSeqSeqHolder.java simple/StringSeqSeqSeqHelper.java simple/StringSeqSeqSeqHolder.java simple/StructWithObjref.java simple/StructWithObjrefHelper.java simple/StructWithObjrefHolder.java simple/TIMESTAMP_INVALID_NSEC.java simple/TestArrayTypedef2Helper.java simple/TestArrayTypedefHelper.java simple/TestArrayTypedefHolder.java simple/TestConstBool.java simple/TestConstDouble.java simple/TestConstFloat.java simple/TestConstLong.java simple/TestConstString.java simple/TestConstTypedef.java simple/TestEnum.java simple/TestEnumHelper.java simple/TestEnumHolder.java simple/TestInterf.java simple/TestInterf2.java simple/TestInterf2Helper.java simple/TestInterf2Holder.java simple/TestInterf2Operations.java simple/TestInterf3.java simple/TestInterf3Helper.java simple/TestInterf3Holder.java simple/TestInterf3Operations.java simple/TestInterfHelper.java simple/TestInterfHolder.java simple/TestInterfOperations.java simple/TestLI.java simple/TestLIHelper.java simple/TestLIHolder.java simple/TestLIOperations.java simple/TestNestedStruct.java simple/TestNestedStructHelper.java simple/TestNestedStructHolder.java simple/TestSeqTypedefHelper.java simple/TestSeqTypedefHolder.java simple/TestStringArrayHelper.java simple/TestStringArrayHolder.java simple/TestStruct.java simple/TestStructArrayHelper.java simple/TestStructArrayHolder.java simple/TestStructHelper.java simple/TestStructHolder.java simple/TestStructSequenceHelper.java simple/TestStructSequenceHolder.java simple/TestStructWithEnum.java simple/TestStructWithEnumHelper.java simple/TestStructWithEnumHolder.java simple/TestTypedefHelper.java simple/_Local2LocalBase.java simple/_Local3LocalBase.java simple/_TestInterf2Stub.java simple/_TestInterf3Stub.java simple/_TestInterfStub.java simple/_TestLILocalBase.java simpleJC.cpp simpleJC.h simpleJS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) simple.idl -nt simple/ArrayBounds.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/EnumArrayHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/EnumArrayHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/EnumSeqHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/EnumSeqHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local2.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local2Helper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local2Holder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local2Operations.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local2SeqHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local2SeqHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local3.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local3Helper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local3Holder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/Local3Operations.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/LongSeqSeqHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/LongSeqSeqHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/LongSeqSeqSeqHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/LongSeqSeqSeqHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/SeqOfTypedefedLongHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/SeqOfTypedefedLongHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/StringSeqHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/StringSeqHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/StringSeqSeqHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/StringSeqSeqHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/StringSeqSeqSeqHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/StringSeqSeqSeqHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/StructWithObjref.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/StructWithObjrefHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/StructWithObjrefHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TIMESTAMP_INVALID_NSEC.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestArrayTypedef2Helper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestArrayTypedefHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestArrayTypedefHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestConstBool.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestConstDouble.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestConstFloat.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestConstLong.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestConstString.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestConstTypedef.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestEnum.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestEnumHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestEnumHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterf.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterf2.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterf2Helper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterf2Holder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterf2Operations.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterf3.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterf3Helper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterf3Holder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterf3Operations.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterfHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterfHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestInterfOperations.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestLI.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestLIHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestLIHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestLIOperations.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestNestedStruct.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestNestedStructHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestNestedStructHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestSeqTypedefHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestSeqTypedefHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStringArrayHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStringArrayHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStruct.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStructArrayHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStructArrayHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStructHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStructHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStructSequenceHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStructSequenceHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStructWithEnum.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStructWithEnumHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestStructWithEnumHolder.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/TestTypedefHelper.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/_Local2LocalBase.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/_Local3LocalBase.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/_TestInterf2Stub.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/_TestInterf3Stub.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/_TestInterfStub.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simple/_TestLILocalBase.java 2> /dev/null && $(TEST_EXE) simple.idl -nt simpleJC.cpp 2> /dev/null && $(TEST_EXE) simple.idl -nt simpleJC.h 2> /dev/null && $(TEST_EXE) simple.idl -nt simpleJS.h 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/ArrayBounds.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/EnumArrayHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/EnumArrayHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/EnumSeqHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/EnumSeqHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local2.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local2Helper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local2Holder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local2Operations.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local2SeqHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local2SeqHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local3.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local3Helper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local3Holder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/Local3Operations.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/LongSeqSeqHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/LongSeqSeqHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/LongSeqSeqSeqHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/LongSeqSeqSeqHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/SeqOfTypedefedLongHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/SeqOfTypedefedLongHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/StringSeqHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/StringSeqHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/StringSeqSeqHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/StringSeqSeqHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/StringSeqSeqSeqHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/StringSeqSeqSeqHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/StructWithObjref.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/StructWithObjrefHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/StructWithObjrefHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TIMESTAMP_INVALID_NSEC.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestArrayTypedef2Helper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestArrayTypedefHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestArrayTypedefHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestConstBool.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestConstDouble.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestConstFloat.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestConstLong.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestConstString.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestConstTypedef.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestEnum.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestEnumHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestEnumHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterf.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterf2.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterf2Helper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterf2Holder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterf2Operations.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterf3.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterf3Helper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterf3Holder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterf3Operations.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterfHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterfHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestInterfOperations.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestLI.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestLIHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestLIHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestLIOperations.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestNestedStruct.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestNestedStructHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestNestedStructHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestSeqTypedefHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestSeqTypedefHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStringArrayHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStringArrayHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStruct.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStructArrayHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStructArrayHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStructHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStructHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStructSequenceHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStructSequenceHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStructWithEnum.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStructWithEnumHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestStructWithEnumHolder.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/TestTypedefHelper.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/_Local2LocalBase.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/_Local3LocalBase.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/_TestInterf2Stub.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/_TestInterf3Stub.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/_TestInterfStub.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simple/_TestLILocalBase.java 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simpleJC.cpp 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simpleJC.h 2> /dev/null && $(TEST_EXE) $(IDL2JNI_ROOT)/bin/idl2jni -nt simpleJS.h 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
simple/ArrayBounds.java simple/EnumArrayHelper.java simple/EnumArrayHolder.java simple/EnumSeqHelper.java simple/EnumSeqHolder.java simple/Local2.java simple/Local2Helper.java simple/Local2Holder.java simple/Local2Operations.java simple/Local2SeqHelper.java simple/Local2SeqHolder.java simple/Local3.java simple/Local3Helper.java simple/Local3Holder.java simple/Local3Operations.java simple/LongSeqSeqHelper.java simple/LongSeqSeqHolder.java simple/LongSeqSeqSeqHelper.java simple/LongSeqSeqSeqHolder.java simple/SeqOfTypedefedLongHelper.java simple/SeqOfTypedefedLongHolder.java simple/StringSeqHelper.java simple/StringSeqHolder.java simple/StringSeqSeqHelper.java simple/StringSeqSeqHolder.java simple/StringSeqSeqSeqHelper.java simple/StringSeqSeqSeqHolder.java simple/StructWithObjref.java simple/StructWithObjrefHelper.java simple/StructWithObjrefHolder.java simple/TIMESTAMP_INVALID_NSEC.java simple/TestArrayTypedef2Helper.java simple/TestArrayTypedefHelper.java simple/TestArrayTypedefHolder.java simple/TestConstBool.java simple/TestConstDouble.java simple/TestConstFloat.java simple/TestConstLong.java simple/TestConstString.java simple/TestConstTypedef.java simple/TestEnum.java simple/TestEnumHelper.java simple/TestEnumHolder.java simple/TestInterf.java simple/TestInterf2.java simple/TestInterf2Helper.java simple/TestInterf2Holder.java simple/TestInterf2Operations.java simple/TestInterf3.java simple/TestInterf3Helper.java simple/TestInterf3Holder.java simple/TestInterf3Operations.java simple/TestInterfHelper.java simple/TestInterfHolder.java simple/TestInterfOperations.java simple/TestLI.java simple/TestLIHelper.java simple/TestLIHolder.java simple/TestLIOperations.java simple/TestNestedStruct.java simple/TestNestedStructHelper.java simple/TestNestedStructHolder.java simple/TestSeqTypedefHelper.java simple/TestSeqTypedefHolder.java simple/TestStringArrayHelper.java simple/TestStringArrayHolder.java simple/TestStruct.java simple/TestStructArrayHelper.java simple/TestStructArrayHolder.java simple/TestStructHelper.java simple/TestStructHolder.java simple/TestStructSequenceHelper.java simple/TestStructSequenceHolder.java simple/TestStructWithEnum.java simple/TestStructWithEnumHelper.java simple/TestStructWithEnumHolder.java simple/TestTypedefHelper.java simple/_Local2LocalBase.java simple/_Local3LocalBase.java simple/_TestInterf2Stub.java simple/_TestInterf3Stub.java simple/_TestInterfStub.java simple/_TestLILocalBase.java simpleJC.cpp simpleJC.h simpleJS.h: simple.idl $(IDL2JNI_ROOT)/bin/idl2jni
	$(IDL2JNI_ROOT)/bin/idl2jni -DUSE_LOCAL -DIDL2JNI_VERSION=1.0 simple.idl
	echo Input: simple

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif
	-rm -rf classes ./simple.jar ; rm -rf simple

__prebuild__:
	@mkdir -p classes 2> /dev/null || cat /dev/null > /dev/null

all: __postbuild__

__postbuild__:
	@"$(JAVA_HOME)/bin/jar" -cf ./simple.jar -C classes .

