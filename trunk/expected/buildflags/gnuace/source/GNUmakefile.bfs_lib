# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.bfs_lib
#
# $Id: gnu.mpd,v 1.1.1.2.2.27 2007/01/18 16:19:49 elliottc Exp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.bfs_lib
DEPENDENCY_FILE  = .depend.bfs_lib

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libbfs.a
LIB              = $(LIB_UNCHECKED)
LIB_NAME         = libbfs

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = libbfs.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

Inside = \
  four.cpp \
  two.cpp

default_group = \
  directory/gets_flags.cpp \
  one.cpp \
  three.cpp

Outside = \
  five.cpp

FILES += \
         $(Inside) \
         $(default_group) \
         $(Outside)

VPATH = .:directory

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS =

PRJ_TYPE = library

INSLIB ?= .
ifeq ($(INSLIB),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/bfs_lib
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  LIB   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

$(VDIR)directory/gets_flags.$(OBJEXT): directory/gets_flags.cpp
	@$(MKDIR) $(VDIR)directory
	$(COMPILE.cc) -Trogdor $(ACE_USE_PCH_OPT) $(CC_OUTPUT_FLAG) $@ $<
	${MVCMD}

ifneq ($(VSHDIR), $(VDIR))
$(VSHDIR)directory/gets_flags.$(OBJEXT): directory/gets_flags.cpp
	@$(MKDIR) $(VSHDIR)directory
	$(COMPILE.cc) -Trogdor $(ACE_USE_PCH_OPT) $(PIC) $(CC_OUTPUT_FLAG) $@ $<
endif

$(VDIR)five.$(OBJEXT): five.cpp
	@$(MKDIR) $(VDIR).
	$(COMPILE.cc) -Trogdor $(ACE_USE_PCH_OPT) $(CC_OUTPUT_FLAG) $@ $<
	${MVCMD}

ifneq ($(VSHDIR), $(VDIR))
$(VSHDIR)five.$(OBJEXT): five.cpp
	@$(MKDIR) $(VSHDIR).
	$(COMPILE.cc) -Trogdor $(ACE_USE_PCH_OPT) $(PIC) $(CC_OUTPUT_FLAG) $@ $<
endif

$(VDIR)four.$(OBJEXT): four.cpp
	@$(MKDIR) $(VDIR).
	$(COMPILE.cc) -Trogdor $(ACE_USE_PCH_OPT) $(CC_OUTPUT_FLAG) $@ $<
	${MVCMD}

ifneq ($(VSHDIR), $(VDIR))
$(VSHDIR)four.$(OBJEXT): four.cpp
	@$(MKDIR) $(VSHDIR).
	$(COMPILE.cc) -Trogdor $(ACE_USE_PCH_OPT) $(PIC) $(CC_OUTPUT_FLAG) $@ $<
endif

$(VDIR)three.$(OBJEXT): three.cpp
	@$(MKDIR) $(VDIR).
	$(COMPILE.cc) -Trogdor $(ACE_USE_PCH_OPT) $(CC_OUTPUT_FLAG) $@ $<
	${MVCMD}

ifneq ($(VSHDIR), $(VDIR))
$(VSHDIR)three.$(OBJEXT): three.cpp
	@$(MKDIR) $(VSHDIR).
	$(COMPILE.cc) -Trogdor $(ACE_USE_PCH_OPT) $(PIC) $(CC_OUTPUT_FLAG) $@ $<
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L.
else
LDFLAGS      += -L.
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:

