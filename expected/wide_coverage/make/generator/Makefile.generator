#----------------------------------------------------------------------------
#       Macros
#----------------------------------------------------------------------------
CXX           = g++
LD            = $(CXX) $(CCFLAGS) $(CPPFLAGS)
AR            = ar
PICFLAGS      = -fPIC
CPPFLAGS      = $(PICFLAGS) $(GENFLAGS) -D_REENTRANT
OBJEXT        = .o
OUTPUT_OPTION = -o "$@"
COMPILE.cc    = $(CXX) $(CCFLAGS) $(CPPFLAGS) -c
LDFLAGS       = -L"." -L"../lib"
CCC           = $(CXX)
MAKEFILE      = Makefile.generator
DEPENDENCIES  = .depend.$(MAKEFILE)
BTARGETDIR    = ../bin/
BIN           = $(BTARGETDIR)generator$(EXESUFFIX)$(EXEEXT)
CAT           = cat
MV            = mv -f
RM            = rm -rf
CP            = cp -p
NUL           = /dev/null
MKDIR         = mkdir -p
TESTDIRSTART  = test -d
TESTDIREND    = ||
EXEEXT        = 
LIBPREFIX     = lib
LIBSUFFIX     = 
GENFLAGS      =
LDLIBS        = -lgenerator_be$(LIBSUFFIX) -ldl $(subst lib,-l,$(sort $(basename $(notdir $(wildcard /usr/lib/librt.so /lib/librt.so))))) -lpthread
OBJS          = .obj/generator$(OBJEXT)
SRC           = generator.cpp
LINK.cc       = $(LD) $(LDFLAGS)
STATICFLAGS   = -DGENERATOR_BE_AS_STATIC_LIBS
EXPORTFLAGS   = 

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------

all: __prebuild__ $(BIN)

$(BIN): $(OBJS)
	@$(TESTDIRSTART) "$(BTARGETDIR)" $(TESTDIREND) $(MKDIR) "$(BTARGETDIR)"
	$(LINK.cc) $(OBJS) $(LDLIBS) $(OUTPUT_OPTION)

generated: $(GENERATED_DIRTY)
	@-:

.obj/generator$(OBJEXT): generator.cpp
	@$(TESTDIRSTART) ".obj/." $(TESTDIREND) $(MKDIR) ".obj/."
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) generator.cpp

clean:
	-$(RM) $(OBJS)

realclean: clean
	-$(RM) $(BIN)
	-$(RM) .obj/

__prebuild__:
	@echo Building generator

#----------------------------------------------------------------------------
#       Dependencies
#----------------------------------------------------------------------------

$(DEPENDENCIES):
	@touch $(DEPENDENCIES)

depend:
	-makedepend -Y $(CFLAGS) $(CCFLAGS) $(CPPFLAGS) -f $(DEPENDENCIES) $(SRC) 2> $(NUL)

include $(DEPENDENCIES)
