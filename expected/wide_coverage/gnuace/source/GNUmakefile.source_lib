# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.source_lib
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.source_lib
DEPENDENCY_FILE  = .depend.source_lib

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libsource_lib.a
LIB              = $(LIB_UNCHECKED)
LIB_NAME         = libsource_lib
static_libs_only = 1

FILES = \
  TheCheat.cpp \
  cre/o.le/more_names.cpp \
  names.cpp \
  qwee.cxx

VPATH = .:cre/o.le

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------

PRJ_TYPE = library

INSLIB ?= ../lib
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =

ifeq ($(versioned_so),1)
SOVERSION = .1.0.0
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/source_lib
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  LIB   =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU

ACE_PCH_SOURCE = source_lib_pch.cpp
ACE_PCH_FILE   = source_lib_pch.h.gch

ifeq ($(pchsupport),1)
CPPFLAGS += -DUSING_PCH

$(addprefix $(VDIR), $(OBJS)): $(VDIR)$(ACE_PCH_FILE)
$(VSHOBJS): $(VSHDIR)$(ACE_PCH_FILE)
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L. -L../lib
else
LDFLAGS      += -L. -L../lib
endif
CPPFLAGS     += -I.

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo source_lib will not be built due to the following missing library:
	@echo $(LIBCHECK)

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../lib
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../lib
SHLIB_PATH        := $(SHLIB_PATH):../lib
LIBPATH           := $(LIBPATH):../lib
PATH              := $(PATH):../lib

GENERATED_DIRTY += cre/o.le/more_names.cpp cre/o.le/more_names.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) more_names.key -nt cre/o.le/more_names.cpp 2> /dev/null || $(TEST_EXE) more_names.key -nt cre/o.le/more_names.h 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "../bin/generator" -nt "cre/o.le/more_names.cpp" 2> /dev/null || $(TEST_EXE) "../bin/generator" -nt "cre/o.le/more_names.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
cre/o.le/more_names.cpp cre/o.le/more_names.h: more_names.key ../bin/generator
	$(MKDIR) cre/o.le
	../bin/generator -o cre/o.le more_names.key
	echo cre/o.le/more_names.cpp and cre/o.le/more_names.h have been generated.
	@echo '#include "source_lib_pch.h"' > temp.$$$$ && cat cre/o.le/more_names.cpp >> temp.$$$$ && mv temp.$$$$ cre/o.le/more_names.cpp


GENERATED_DIRTY += names.cpp names.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) names.key -nt names.cpp 2> /dev/null || $(TEST_EXE) names.key -nt names.h 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "../bin/generator" -nt "names.cpp" 2> /dev/null || $(TEST_EXE) "../bin/generator" -nt "names.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
names.cpp names.h: names.key something ../bin/generator
	../bin/generator -n names names.key
	echo names.cpp and names.h have been generated.
	@echo '#include "source_lib_pch.h"' > temp.$$$$ && cat names.cpp >> temp.$$$$ && mv temp.$$$$ names.cpp


GENERATED_DIRTY += TheCheat.cpp TheCheat.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) TheCheat.r -nt TheCheat.cpp 2> /dev/null || $(TEST_EXE) TheCheat.r -nt TheCheat.h 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "../bin/cppgen.pl" -nt "TheCheat.cpp" 2> /dev/null || $(TEST_EXE) "../bin/cppgen.pl" -nt "TheCheat.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
TheCheat.cpp TheCheat.h: TheCheat.r ../bin/cppgen.pl
	perl ../bin/cppgen.pl  TheCheat.r -o $@
	@echo '#include "source_lib_pch.h"' > temp.$$$$ && cat TheCheat.cpp >> temp.$$$$ && mv temp.$$$$ TheCheat.cpp


GENERATED_DIRTY += bar.txt moop.hxx qwee.cxx qwee_T.C weer.inl
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) mondo/all.mondo -nt ./bar.txt 2> /dev/null || $(TEST_EXE) mondo/all.mondo -nt ./moop.hxx 2> /dev/null || $(TEST_EXE) mondo/all.mondo -nt ./qwee.cxx 2> /dev/null || $(TEST_EXE) mondo/all.mondo -nt ./qwee_T.C 2> /dev/null || $(TEST_EXE) mondo/all.mondo -nt ./weer.inl 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "../mondo/mondo.pl" -nt "./bar.txt" 2> /dev/null || $(TEST_EXE) "../mondo/mondo.pl" -nt "./moop.hxx" 2> /dev/null || $(TEST_EXE) "../mondo/mondo.pl" -nt "./qwee.cxx" 2> /dev/null || $(TEST_EXE) "../mondo/mondo.pl" -nt "./qwee_T.C" 2> /dev/null || $(TEST_EXE) "../mondo/mondo.pl" -nt "./weer.inl" 2> /dev/null || $(TEST_EXE) "../mondo/modules/ReaderGen.pm" -nt "./bar.txt" 2> /dev/null || $(TEST_EXE) "../mondo/modules/ReaderGen.pm" -nt "./moop.hxx" 2> /dev/null || $(TEST_EXE) "../mondo/modules/ReaderGen.pm" -nt "./qwee.cxx" 2> /dev/null || $(TEST_EXE) "../mondo/modules/ReaderGen.pm" -nt "./qwee_T.C" 2> /dev/null || $(TEST_EXE) "../mondo/modules/ReaderGen.pm" -nt "./weer.inl" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
bar.txt moop.hxx qwee.cxx qwee_T.C weer.inl: mondo/all.mondo ../mondo/mondo.pl ../mondo/modules/ReaderGen.pm
	perl ../mondo/mondo.pl -fake mondo/all.mondo
	@echo '#include "source_lib_pch.h"' > temp.$$$$ && cat ./qwee.cxx >> temp.$$$$ && mv temp.$$$$ ./qwee.cxx


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:

ifeq (,1)
endif
