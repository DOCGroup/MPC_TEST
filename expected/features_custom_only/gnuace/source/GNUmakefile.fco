# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.fco
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.fco
DEPENDENCY_FILE  = .depend.fco

FILES = \

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------

PRJ_TYPE = library

INSLIB ?= .
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/fco
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif


include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L.
else
LDFLAGS      += -L.
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo fco will not be built due to the following missing library:
	@echo $(LIBCHECK)

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
GENERATED_DIRTY += zar_thatA.cpp zar_thatA.h zar_thatA.inl zar_thatB.cpp zar_thatB.h zar_thatB.inl zar_thatC.cpp zar_thatC.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) that.zar -nt zar_thatA.cpp 2> /dev/null || $(TEST_EXE) that.zar -nt zar_thatA.h 2> /dev/null || $(TEST_EXE) that.zar -nt zar_thatA.inl 2> /dev/null || $(TEST_EXE) that.zar -nt zar_thatB.cpp 2> /dev/null || $(TEST_EXE) that.zar -nt zar_thatB.h 2> /dev/null || $(TEST_EXE) that.zar -nt zar_thatB.inl 2> /dev/null || $(TEST_EXE) that.zar -nt zar_thatC.cpp 2> /dev/null || $(TEST_EXE) that.zar -nt zar_thatC.h 2> /dev/null || echo 0),)
      .NOTPARALLEL:
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
zar_thatA.cpp zar_thatA.h zar_thatA.inl zar_thatB.cpp zar_thatB.h zar_thatB.inl zar_thatC.cpp zar_thatC.h: that.zar
	perl ../bin/exercise.pl $(CLO_ZARFLAGS) -GA -Sc that.zar


GENERATED_DIRTY += zar_thisA.cpp zar_thisA.h zar_thisA.inl zar_thisB.cpp zar_thisB.h zar_thisB.inl zar_thisB_T.cpp zar_thisB_T.h zar_thisB_T.inl zar_thisC.cpp zar_thisC.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) this.zar -nt zar_thisA.cpp 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisA.h 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisA.inl 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisB.cpp 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisB.h 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisB.inl 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisB_T.cpp 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisB_T.h 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisB_T.inl 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisC.cpp 2> /dev/null || $(TEST_EXE) this.zar -nt zar_thisC.h 2> /dev/null || echo 0),)
      .NOTPARALLEL:
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
zar_thisA.cpp zar_thisA.h zar_thisA.inl zar_thisB.cpp zar_thisB.h zar_thisB.inl zar_thisB_T.cpp zar_thisB_T.h zar_thisB_T.inl zar_thisC.cpp zar_thisC.h: this.zar
	perl ../bin/exercise.pl $(CLO_ZARFLAGS) -GA this.zar


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
all: $(GENERATED_DIRTY)
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:

ifeq (,1)
endif
